version: 2.1

orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.2.1
commands:
  destroy-environment:
    
    description: remove backend and model specified stacks ids .
    steps:
      - run:
          name: remove environments
          when: on_fail
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws s3 rm --recursive s3://nlp-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack \
              --stack-name "nlp-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
              --stack-name "nlp-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
jobs:
  build-backend:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
#          app-dir: ~/project/package-directory/

#  test-backend:
#    docker:
#      - image: circleci/node:13.8.0
#    steps:
#      - checkout
#      - python/install-packages:
#          pkg-manager: pip
#      - run:
#          name: test back end for errors
#          command: |
#            pip install
#            flask run
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: check backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name nlp-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=nlp
      - run:
          name: check model infracture
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name nlp-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --tag project=nlp
      - run:
          name: Retrive beckend ip for ansible inv file
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_PUBLIC_IP:80" >> .circleci/backend_public_url.txt
            echo "$BACKEND_PUBLIC_IP" >> .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/backend_public_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['c8:70:78:5d:b2:8c:42:5a:03:6c:38:83:55:43:c8:b4']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies and libs
          command: |
            cd ~/project/.circleci/ansible
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  deploy-model:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies and some libs
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install awscli
      - run:
          name: Deploying model file
          command: |
            cd model
            aws s3 sync . "s3://nlp-${CIRCLE_WORKFLOW_ID:0:7}" --delete
      - destroy-environment
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['c8:70:78:5d:b2:8c:42:5a:03:6c:38:83:55:43:c8:b4']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies and some libs
          command: |
            apk add --update ansible nodejs npm rsync openssh
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies and some libs
          command: |
            # Your code here
            apk update
            apk upgrade
            apk add unzip
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip
      - run:
          name: Install nodejs
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install aws cli
          command: |
            pip install awscli --upgrade
            aws --version

      - run:
          name: Getting backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke cigarette test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:80"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 0
            fi

      - destroy-environment
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront dist
          command: |
            aws cloudformation update-stack \
              --use-previous-template --stack-name InitialStack \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false
      - destroy-environment
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: remove old stacks
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                          --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Removing old Stacks#....${OldWorkflowID}"
              echo "s3://nlp-${OldWorkflowID}"
              aws s3 rm "s3://nlp-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "nlp-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "nlp-frontend-${OldWorkflowID}"
            else
              echo "There is no old stacks needs to be cleaned up"
            fi
workflows:
  default:
    jobs:
      - build-backend
#      - test-backend:
#          requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-model:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [deploy-model]
      - smoke-test:
          requires: [deploy-backend, deploy-model]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
